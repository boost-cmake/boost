cmake_minimum_required(VERSION 3.5)
project(boost_compute)

find_package(BCM)
include(BCMDeploy)
include(BCMSetupVersion)

find_package(boost_iterator)
find_package(boost_property_tree)
find_package(boost_array)
find_package(boost_utility)
find_package(boost_static_assert)
find_package(boost_uuid)
find_package(boost_proto)
find_package(boost_type_traits)
find_package(boost_smart_ptr)
find_package(boost_config)
find_package(boost_function)
find_package(boost_core)
find_package(boost_tuple)
find_package(boost_mpl)
find_package(boost_assert)
find_package(boost_fusion)
find_package(boost_preprocessor)
find_package(boost_optional)
find_package(boost_function_types)
find_package(boost_algorithm)
find_package(boost_thread)
find_package(boost_chrono)
find_package(boost_range)
find_package(boost_typeof)
find_package(boost_filesystem)
find_package(boost_lexical_cast)
find_package(boost_throw_exception)

bcm_setup_version(VERSION 1.64.0)

add_library(boost_compute INTERFACE
)
set_property(TARGET boost_compute PROPERTY EXPORT_NAME compute)

target_link_libraries(boost_compute INTERFACE boost::iterator)
target_link_libraries(boost_compute INTERFACE boost::property_tree)
target_link_libraries(boost_compute INTERFACE boost::array)
target_link_libraries(boost_compute INTERFACE boost::utility)
target_link_libraries(boost_compute INTERFACE boost::static_assert)
target_link_libraries(boost_compute INTERFACE boost::uuid)
target_link_libraries(boost_compute INTERFACE boost::proto)
target_link_libraries(boost_compute INTERFACE boost::type_traits)
target_link_libraries(boost_compute INTERFACE boost::smart_ptr)
target_link_libraries(boost_compute INTERFACE boost::config)
target_link_libraries(boost_compute INTERFACE boost::function)
target_link_libraries(boost_compute INTERFACE boost::core)
target_link_libraries(boost_compute INTERFACE boost::tuple)
target_link_libraries(boost_compute INTERFACE boost::mpl)
target_link_libraries(boost_compute INTERFACE boost::assert)
target_link_libraries(boost_compute INTERFACE boost::fusion)
target_link_libraries(boost_compute INTERFACE boost::preprocessor)
target_link_libraries(boost_compute INTERFACE boost::optional)
target_link_libraries(boost_compute INTERFACE boost::function_types)
target_link_libraries(boost_compute INTERFACE boost::algorithm)
target_link_libraries(boost_compute INTERFACE boost::thread)
target_link_libraries(boost_compute INTERFACE boost::chrono)
target_link_libraries(boost_compute INTERFACE boost::range)
target_link_libraries(boost_compute INTERFACE boost::typeof)
target_link_libraries(boost_compute INTERFACE boost::filesystem)
target_link_libraries(boost_compute INTERFACE boost::lexical_cast)
target_link_libraries(boost_compute INTERFACE boost::throw_exception)




bcm_deploy(TARGETS boost_compute INCLUDE include NAMESPACE boost::)

bcm_add_test_subdirectory()
